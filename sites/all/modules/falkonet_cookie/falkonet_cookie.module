<?php
/**
 * @file
 * Module file for falkonet_cookie.
 */

/**
 * @defgroup falkonet_cookie Example: Block
 * @ingroup examples
 * @{
 * Demonstrates code creation of blocks.
 *
 * This is an example outlining how a module can define blocks that can be
 * displayed on various pages of a site, or how to alter blocks provided by
 * other modules.
 */

/**
 * Implements hook_menu().
 *
 * Provides a default page to explain what this module does.
 */
function falkonet_cookie_menu() {
  $items['falkonet/falkonet_cookie'] = array(
    'page callback' => 'falkonet_cookie_page',
    'access callback' => TRUE,
    'title' => 'Block Cookie',
  );
  
  $items['falkonet/falkonet_cookie_ajax'] = array(
    'page callback' => 'falkonet_cookie_ajax_get_ajax',
    'access callback' => TRUE,
    'type' => MENU_CALLBACK,
	'delivery callback' => 'falkonet_cookie_ajax_callback',
  );
  
  return $items;
}

function falkonet_cookie_ajax_get_ajax() {
  // Just load a node and return teaser, you can return whatever you want including forms
  return '';
}

function falkonet_cookie_ajax_callback($page_callback_result) {
  // Only render content
//  $content = drupal_render($page_callback_result);
  drupal_page_is_cacheable(false);
  
  print theme('falkonet_block_cookie_ajax' , array(
	  'content' => variable_get('falkonet_cookie_string', ''),
	  'uid'		=> variable_get('falkonet_cookie_uid', ''),
	  ));
  
// Perform end-of-request tasks.
  drupal_page_footer();
}

/**
 * Simple page function to explain what the block example is about.
 */
function falkonet_cookie_page() {
  $page = array(
    '#type' => 'markup',
    '#markup' => 'test bloku',
  );
  return $page;
}
/**
 * Implements hook_block_info().
 *
 * This hook declares what blocks are provided by the module.
 */
function falkonet_cookie_block_info() {
  

  // This sample shows how to provide default settings. In this case we'll
  // enable the block in the first sidebar and make it visible only on
  // 'node/*' pages. See the hook_block_info() documentation for these.
  $blocks['example_empty'] = array(
    'info' => t('Cookie: simple block'),
    'visibility' => BLOCK_VISIBILITY_NOTLISTED,
  );

  return $blocks;
}

/**
 * Implements hook_block_configure().
 *
 * This hook declares configuration options for blocks provided by this module.
 */
function falkonet_cookie_block_configure($delta = '') {
  $form = array();
  // The $delta parameter tells us which block is being configured.
  // In this example, we'll allow the administrator to customize
  // the text of the 'configurable text string' block defined in this module.
  if ($delta == 'example_empty') {
	
	$uid = variable_get(
			  'falkonet_cookie_uid', 
			  false
			  );
	
	$content = variable_get(
			  'falkonet_cookie_string', 
			  false
			  );
	  
	if ($uid === false) {
		$uid = uniqid();
		variable_set('falkonet_cookie_uid', $uid);
	}
	if ($content === false) {
		$content = theme('falkonet_block_cookie_sample' , array('content' => ''));
		variable_set('falkonet_cookie_string', $content);
	}
	
    $form['falkonet_cookie_uid'] = array(
      '#type' => 'textfield',
      '#title' => 'Identyfikator ciastka',
      '#size' => 60,
      '#default_value' => $uid,
    );
	
    $form['falkonet_cookie_string'] = array(
      '#type' => 'textarea',
      '#title' => 'Regulamin cookie',
      '#rows' => 30,
      '#default_value' => $content,
    );
	
  }
  return $form;
}

/**
 * Implements hook_block_save().
 *
 * This hook declares how the configured options for a block
 * provided by this module are saved.
 */
function falkonet_cookie_block_save($delta = '', $edit = array()) {
  // We need to save settings from the configuration form.
  // We need to check $delta to make sure we are saving the right block.
  if ($delta == 'example_empty') {
    // Have Drupal save the string to the database.
    variable_set('falkonet_cookie_string', $edit['falkonet_cookie_string']);
    variable_set('falkonet_cookie_uid', $edit['falkonet_cookie_uid']);
  }
}

/**
 * Implements hook_block_view().
 *
 * This hook generates the contents of the blocks themselves.
 */
function falkonet_cookie_block_view($delta = '') {
  // The $delta parameter tells us which block is being requested.
	
  switch ($delta) {

    case 'example_empty':
      $block['subject'] = '';
      $block['content'] = falkonet_cookie_contents($delta);
      break;

  }
  return $block;
}

/**
 * A module-defined block content function.
 */
function falkonet_cookie_contents($which_block) {
	
  switch ($which_block) {
    case 'example_empty':
	global $base_url;
		
    return theme('falkonet_block_cookie' , array('content' => ''));
  }
}

function falkonet_cookie_get_path() {
	static $path;
	
	if (empty($path)) {
		$path = drupal_get_path('module', 'falkonet_cookie');
	}
	
	return $path;
}

function falkonet_cookie_theme() {
	return array(
		'falkonet_block_cookie' => array( 
			'arguments' => array('content'), 
			'template' => 'theme/falkonet_cookie_block' 
		),
		'falkonet_block_cookie_ajax' => array( 
			'arguments' => array('content', 'uid'), 
			'template' => 'theme/falkonet_cookie_block_ajax' 
		),
		'falkonet_block_cookie_sample' => array( 
			'arguments' => array('content'), 
			'template' => 'theme/falkonet_cookie_block_sample' 
		),
  	);
}

/*
 * The following hooks can be used to alter blocks
 * provided by your own or other modules.
 */

/**
 * Implements hook_block_list_alter().
 *
 * This hook allows you to add, remove or modify blocks in the block list. The
 * block list contains the block definitions. This example requires
 * search module and the search block enabled
 * to see how this hook implementation works.
 *
 * You may also be interested in hook_block_info_alter(), which allows changes
 * to the behavior of blocks.
 */
function falkonet_cookie_block_list_alter(&$blocks) {
  // We are going to make the search block sticky on bottom of regions. For
  // this example, we will modify the block list and append the search block at
  // the end of the list, so even if the administrator configures the block to
  // be on the top of the region, it will demote to bottom again.
  foreach ($blocks as $bid => $block) {
    if (($block->module == 'search') && ($block->delta == 'form')) {
      // Remove the block from the list and append to the end.
      unset($blocks[$bid]);
      $blocks[$bid] = $block;
      break;
    }
  }
}

/**
 * Implements hook_block_view_alter().
 *
 * This hook allows you to modify the output of any block in the system.
 *
 * In addition, instead of hook_block_view_alter(), which is called for all
 * blocks, you can also use hook_block_view_MODULE_DELTA_alter() to alter a
 * specific block. To change only our block using
 * hook_block_view_MODULE_DELTA_alter, we would use the function:
 * falkonet_cookie_block_view_falkonet_cookie_example_configurable_text_alter()
 *
 * We are going to uppercase the subject (the title of the block as shown to the
 * user) of any block if the string "uppercase" appears in the block title or
 * subject. Default block titles are set programmatically in the subject key;
 * titles created through the UI are saved in the title key. This module creates
 * an example block to demonstrate this effect (default title set
 * programmatically as subject).  You can also demonstrate the effect of this
 * hook by creating a new block whose title has the string 'uppercase' in it
 * (set as title through the UI).
 */
function falkonet_cookie_block_view_alter(&$data, $block) {
  // We'll search for the string 'uppercase'.
  if ((!empty($block->title) && stristr($block->title, 'uppercase')) || (!empty($data['subject']) && stristr($data['subject'], 'uppercase'))) {
    // This will uppercase the default title.
    $data['subject'] = isset($data['subject']) ? drupal_strtoupper($data['subject']) : '';
    // This will uppercase a title set in the UI.
    $block->title = isset($block->title) ? drupal_strtoupper($block->title) : '';
  }
}
/**
 * @} End of "defgroup falkonet_cookie".
 */
